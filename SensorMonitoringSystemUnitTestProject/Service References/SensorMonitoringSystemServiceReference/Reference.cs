//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SensorMonitoringSystemUnitTestProject.SensorMonitoringSystemServiceReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Companies", Namespace="http://schemas.datacontract.org/2004/07/SensorMonitoringSystem")]
    [System.SerializableAttribute()]
    public partial class Companies : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CompanyIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CompanyNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CompanyID {
            get {
                return this.CompanyIDField;
            }
            set {
                if ((this.CompanyIDField.Equals(value) != true)) {
                    this.CompanyIDField = value;
                    this.RaisePropertyChanged("CompanyID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CompanyName {
            get {
                return this.CompanyNameField;
            }
            set {
                if ((object.ReferenceEquals(this.CompanyNameField, value) != true)) {
                    this.CompanyNameField = value;
                    this.RaisePropertyChanged("CompanyName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Users", Namespace="http://schemas.datacontract.org/2004/07/SensorMonitoringSystem")]
    [System.SerializableAttribute()]
    public partial class Users : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CompanyIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsActivatedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PasswordField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PhoneNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long RegistrationCodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SurnameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int UserIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UsernameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CompanyID {
            get {
                return this.CompanyIDField;
            }
            set {
                if ((this.CompanyIDField.Equals(value) != true)) {
                    this.CompanyIDField = value;
                    this.RaisePropertyChanged("CompanyID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsActivated {
            get {
                return this.IsActivatedField;
            }
            set {
                if ((this.IsActivatedField.Equals(value) != true)) {
                    this.IsActivatedField = value;
                    this.RaisePropertyChanged("IsActivated");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Password {
            get {
                return this.PasswordField;
            }
            set {
                if ((object.ReferenceEquals(this.PasswordField, value) != true)) {
                    this.PasswordField = value;
                    this.RaisePropertyChanged("Password");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PhoneNumber {
            get {
                return this.PhoneNumberField;
            }
            set {
                if ((object.ReferenceEquals(this.PhoneNumberField, value) != true)) {
                    this.PhoneNumberField = value;
                    this.RaisePropertyChanged("PhoneNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long RegistrationCode {
            get {
                return this.RegistrationCodeField;
            }
            set {
                if ((this.RegistrationCodeField.Equals(value) != true)) {
                    this.RegistrationCodeField = value;
                    this.RaisePropertyChanged("RegistrationCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Surname {
            get {
                return this.SurnameField;
            }
            set {
                if ((object.ReferenceEquals(this.SurnameField, value) != true)) {
                    this.SurnameField = value;
                    this.RaisePropertyChanged("Surname");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int UserID {
            get {
                return this.UserIDField;
            }
            set {
                if ((this.UserIDField.Equals(value) != true)) {
                    this.UserIDField = value;
                    this.RaisePropertyChanged("UserID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Username {
            get {
                return this.UsernameField;
            }
            set {
                if ((object.ReferenceEquals(this.UsernameField, value) != true)) {
                    this.UsernameField = value;
                    this.RaisePropertyChanged("Username");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="UsersDetails", Namespace="http://schemas.datacontract.org/2004/07/SensorMonitoringSystem")]
    [System.SerializableAttribute()]
    public partial class UsersDetails : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AddressField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime DateOfBirthField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int DetailIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EmailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int UserIDField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Address {
            get {
                return this.AddressField;
            }
            set {
                if ((object.ReferenceEquals(this.AddressField, value) != true)) {
                    this.AddressField = value;
                    this.RaisePropertyChanged("Address");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string City {
            get {
                return this.CityField;
            }
            set {
                if ((object.ReferenceEquals(this.CityField, value) != true)) {
                    this.CityField = value;
                    this.RaisePropertyChanged("City");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime DateOfBirth {
            get {
                return this.DateOfBirthField;
            }
            set {
                if ((this.DateOfBirthField.Equals(value) != true)) {
                    this.DateOfBirthField = value;
                    this.RaisePropertyChanged("DateOfBirth");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int DetailID {
            get {
                return this.DetailIDField;
            }
            set {
                if ((this.DetailIDField.Equals(value) != true)) {
                    this.DetailIDField = value;
                    this.RaisePropertyChanged("DetailID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Email {
            get {
                return this.EmailField;
            }
            set {
                if ((object.ReferenceEquals(this.EmailField, value) != true)) {
                    this.EmailField = value;
                    this.RaisePropertyChanged("Email");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int UserID {
            get {
                return this.UserIDField;
            }
            set {
                if ((this.UserIDField.Equals(value) != true)) {
                    this.UserIDField = value;
                    this.RaisePropertyChanged("UserID");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Sensors", Namespace="http://schemas.datacontract.org/2004/07/SensorMonitoringSystem")]
    [System.SerializableAttribute()]
    public partial class Sensors : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CompanyIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int GraphicalMaxValueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int GraphicalMinValueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal HighestCriticalValueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal LowestCriticalValueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SensorAddressField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SensorDescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int SensorIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SensorUnitField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CompanyID {
            get {
                return this.CompanyIDField;
            }
            set {
                if ((this.CompanyIDField.Equals(value) != true)) {
                    this.CompanyIDField = value;
                    this.RaisePropertyChanged("CompanyID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int GraphicalMaxValue {
            get {
                return this.GraphicalMaxValueField;
            }
            set {
                if ((this.GraphicalMaxValueField.Equals(value) != true)) {
                    this.GraphicalMaxValueField = value;
                    this.RaisePropertyChanged("GraphicalMaxValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int GraphicalMinValue {
            get {
                return this.GraphicalMinValueField;
            }
            set {
                if ((this.GraphicalMinValueField.Equals(value) != true)) {
                    this.GraphicalMinValueField = value;
                    this.RaisePropertyChanged("GraphicalMinValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal HighestCriticalValue {
            get {
                return this.HighestCriticalValueField;
            }
            set {
                if ((this.HighestCriticalValueField.Equals(value) != true)) {
                    this.HighestCriticalValueField = value;
                    this.RaisePropertyChanged("HighestCriticalValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal LowestCriticalValue {
            get {
                return this.LowestCriticalValueField;
            }
            set {
                if ((this.LowestCriticalValueField.Equals(value) != true)) {
                    this.LowestCriticalValueField = value;
                    this.RaisePropertyChanged("LowestCriticalValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SensorAddress {
            get {
                return this.SensorAddressField;
            }
            set {
                if ((object.ReferenceEquals(this.SensorAddressField, value) != true)) {
                    this.SensorAddressField = value;
                    this.RaisePropertyChanged("SensorAddress");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SensorDescription {
            get {
                return this.SensorDescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.SensorDescriptionField, value) != true)) {
                    this.SensorDescriptionField = value;
                    this.RaisePropertyChanged("SensorDescription");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int SensorID {
            get {
                return this.SensorIDField;
            }
            set {
                if ((this.SensorIDField.Equals(value) != true)) {
                    this.SensorIDField = value;
                    this.RaisePropertyChanged("SensorID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SensorUnit {
            get {
                return this.SensorUnitField;
            }
            set {
                if ((object.ReferenceEquals(this.SensorUnitField, value) != true)) {
                    this.SensorUnitField = value;
                    this.RaisePropertyChanged("SensorUnit");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SensorsDatas", Namespace="http://schemas.datacontract.org/2004/07/SensorMonitoringSystem")]
    [System.SerializableAttribute()]
    public partial class SensorsDatas : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int DataIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal ReadValueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime ReadValueTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int SensorIDField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int DataID {
            get {
                return this.DataIDField;
            }
            set {
                if ((this.DataIDField.Equals(value) != true)) {
                    this.DataIDField = value;
                    this.RaisePropertyChanged("DataID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal ReadValue {
            get {
                return this.ReadValueField;
            }
            set {
                if ((this.ReadValueField.Equals(value) != true)) {
                    this.ReadValueField = value;
                    this.RaisePropertyChanged("ReadValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime ReadValueTime {
            get {
                return this.ReadValueTimeField;
            }
            set {
                if ((this.ReadValueTimeField.Equals(value) != true)) {
                    this.ReadValueTimeField = value;
                    this.RaisePropertyChanged("ReadValueTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int SensorID {
            get {
                return this.SensorIDField;
            }
            set {
                if ((this.SensorIDField.Equals(value) != true)) {
                    this.SensorIDField = value;
                    this.RaisePropertyChanged("SensorID");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="SensorMonitoringSystemServiceReference.ISensorMonitoringSystemService")]
    public interface ISensorMonitoringSystemService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISensorMonitoringSystemService/FindAllCompanies", ReplyAction="http://tempuri.org/ISensorMonitoringSystemService/FindAllCompaniesResponse")]
        SensorMonitoringSystemUnitTestProject.SensorMonitoringSystemServiceReference.Companies[] FindAllCompanies();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISensorMonitoringSystemService/FindAllCompanies", ReplyAction="http://tempuri.org/ISensorMonitoringSystemService/FindAllCompaniesResponse")]
        System.Threading.Tasks.Task<SensorMonitoringSystemUnitTestProject.SensorMonitoringSystemServiceReference.Companies[]> FindAllCompaniesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISensorMonitoringSystemService/UsernameControl", ReplyAction="http://tempuri.org/ISensorMonitoringSystemService/UsernameControlResponse")]
        bool UsernameControl(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISensorMonitoringSystemService/UsernameControl", ReplyAction="http://tempuri.org/ISensorMonitoringSystemService/UsernameControlResponse")]
        System.Threading.Tasks.Task<bool> UsernameControlAsync(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISensorMonitoringSystemService/RegisterUser", ReplyAction="http://tempuri.org/ISensorMonitoringSystemService/RegisterUserResponse")]
        void RegisterUser(SensorMonitoringSystemUnitTestProject.SensorMonitoringSystemServiceReference.Users RegisteredUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISensorMonitoringSystemService/RegisterUser", ReplyAction="http://tempuri.org/ISensorMonitoringSystemService/RegisterUserResponse")]
        System.Threading.Tasks.Task RegisterUserAsync(SensorMonitoringSystemUnitTestProject.SensorMonitoringSystemServiceReference.Users RegisteredUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISensorMonitoringSystemService/FindUser", ReplyAction="http://tempuri.org/ISensorMonitoringSystemService/FindUserResponse")]
        SensorMonitoringSystemUnitTestProject.SensorMonitoringSystemServiceReference.Users FindUser(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISensorMonitoringSystemService/FindUser", ReplyAction="http://tempuri.org/ISensorMonitoringSystemService/FindUserResponse")]
        System.Threading.Tasks.Task<SensorMonitoringSystemUnitTestProject.SensorMonitoringSystemServiceReference.Users> FindUserAsync(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISensorMonitoringSystemService/RegisterUserDetail", ReplyAction="http://tempuri.org/ISensorMonitoringSystemService/RegisterUserDetailResponse")]
        void RegisterUserDetail(SensorMonitoringSystemUnitTestProject.SensorMonitoringSystemServiceReference.UsersDetails RegisteredUserDetail);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISensorMonitoringSystemService/RegisterUserDetail", ReplyAction="http://tempuri.org/ISensorMonitoringSystemService/RegisterUserDetailResponse")]
        System.Threading.Tasks.Task RegisterUserDetailAsync(SensorMonitoringSystemUnitTestProject.SensorMonitoringSystemServiceReference.UsersDetails RegisteredUserDetail);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISensorMonitoringSystemService/UserDetailControl", ReplyAction="http://tempuri.org/ISensorMonitoringSystemService/UserDetailControlResponse")]
        bool UserDetailControl(string userid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISensorMonitoringSystemService/UserDetailControl", ReplyAction="http://tempuri.org/ISensorMonitoringSystemService/UserDetailControlResponse")]
        System.Threading.Tasks.Task<bool> UserDetailControlAsync(string userid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISensorMonitoringSystemService/SendInfoMail", ReplyAction="http://tempuri.org/ISensorMonitoringSystemService/SendInfoMailResponse")]
        void SendInfoMail(SensorMonitoringSystemUnitTestProject.SensorMonitoringSystemServiceReference.UsersDetails RegisteredUserDetail);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISensorMonitoringSystemService/SendInfoMail", ReplyAction="http://tempuri.org/ISensorMonitoringSystemService/SendInfoMailResponse")]
        System.Threading.Tasks.Task SendInfoMailAsync(SensorMonitoringSystemUnitTestProject.SensorMonitoringSystemServiceReference.UsersDetails RegisteredUserDetail);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISensorMonitoringSystemService/ChangePassword", ReplyAction="http://tempuri.org/ISensorMonitoringSystemService/ChangePasswordResponse")]
        void ChangePassword(SensorMonitoringSystemUnitTestProject.SensorMonitoringSystemServiceReference.Users ChangedPasswordUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISensorMonitoringSystemService/ChangePassword", ReplyAction="http://tempuri.org/ISensorMonitoringSystemService/ChangePasswordResponse")]
        System.Threading.Tasks.Task ChangePasswordAsync(SensorMonitoringSystemUnitTestProject.SensorMonitoringSystemServiceReference.Users ChangedPasswordUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISensorMonitoringSystemService/Activation", ReplyAction="http://tempuri.org/ISensorMonitoringSystemService/ActivationResponse")]
        void Activation(SensorMonitoringSystemUnitTestProject.SensorMonitoringSystemServiceReference.Users ActivatedUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISensorMonitoringSystemService/Activation", ReplyAction="http://tempuri.org/ISensorMonitoringSystemService/ActivationResponse")]
        System.Threading.Tasks.Task ActivationAsync(SensorMonitoringSystemUnitTestProject.SensorMonitoringSystemServiceReference.Users ActivatedUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISensorMonitoringSystemService/FindUserDetail", ReplyAction="http://tempuri.org/ISensorMonitoringSystemService/FindUserDetailResponse")]
        SensorMonitoringSystemUnitTestProject.SensorMonitoringSystemServiceReference.UsersDetails FindUserDetail(string userid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISensorMonitoringSystemService/FindUserDetail", ReplyAction="http://tempuri.org/ISensorMonitoringSystemService/FindUserDetailResponse")]
        System.Threading.Tasks.Task<SensorMonitoringSystemUnitTestProject.SensorMonitoringSystemServiceReference.UsersDetails> FindUserDetailAsync(string userid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISensorMonitoringSystemService/ChangeCode", ReplyAction="http://tempuri.org/ISensorMonitoringSystemService/ChangeCodeResponse")]
        void ChangeCode(SensorMonitoringSystemUnitTestProject.SensorMonitoringSystemServiceReference.Users ChangedCodeUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISensorMonitoringSystemService/ChangeCode", ReplyAction="http://tempuri.org/ISensorMonitoringSystemService/ChangeCodeResponse")]
        System.Threading.Tasks.Task ChangeCodeAsync(SensorMonitoringSystemUnitTestProject.SensorMonitoringSystemServiceReference.Users ChangedCodeUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISensorMonitoringSystemService/FindCompaniesAllSensors", ReplyAction="http://tempuri.org/ISensorMonitoringSystemService/FindCompaniesAllSensorsResponse" +
            "")]
        SensorMonitoringSystemUnitTestProject.SensorMonitoringSystemServiceReference.Sensors[] FindCompaniesAllSensors(string companyid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISensorMonitoringSystemService/FindCompaniesAllSensors", ReplyAction="http://tempuri.org/ISensorMonitoringSystemService/FindCompaniesAllSensorsResponse" +
            "")]
        System.Threading.Tasks.Task<SensorMonitoringSystemUnitTestProject.SensorMonitoringSystemServiceReference.Sensors[]> FindCompaniesAllSensorsAsync(string companyid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISensorMonitoringSystemService/SensorDataControl", ReplyAction="http://tempuri.org/ISensorMonitoringSystemService/SensorDataControlResponse")]
        bool SensorDataControl(string sensorid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISensorMonitoringSystemService/SensorDataControl", ReplyAction="http://tempuri.org/ISensorMonitoringSystemService/SensorDataControlResponse")]
        System.Threading.Tasks.Task<bool> SensorDataControlAsync(string sensorid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISensorMonitoringSystemService/FindSensor", ReplyAction="http://tempuri.org/ISensorMonitoringSystemService/FindSensorResponse")]
        SensorMonitoringSystemUnitTestProject.SensorMonitoringSystemServiceReference.Sensors FindSensor(string sensorid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISensorMonitoringSystemService/FindSensor", ReplyAction="http://tempuri.org/ISensorMonitoringSystemService/FindSensorResponse")]
        System.Threading.Tasks.Task<SensorMonitoringSystemUnitTestProject.SensorMonitoringSystemServiceReference.Sensors> FindSensorAsync(string sensorid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISensorMonitoringSystemService/FindAllSensorDatas", ReplyAction="http://tempuri.org/ISensorMonitoringSystemService/FindAllSensorDatasResponse")]
        SensorMonitoringSystemUnitTestProject.SensorMonitoringSystemServiceReference.SensorsDatas[] FindAllSensorDatas(string sensorid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISensorMonitoringSystemService/FindAllSensorDatas", ReplyAction="http://tempuri.org/ISensorMonitoringSystemService/FindAllSensorDatasResponse")]
        System.Threading.Tasks.Task<SensorMonitoringSystemUnitTestProject.SensorMonitoringSystemServiceReference.SensorsDatas[]> FindAllSensorDatasAsync(string sensorid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISensorMonitoringSystemService/FindDatasBetweenDates", ReplyAction="http://tempuri.org/ISensorMonitoringSystemService/FindDatasBetweenDatesResponse")]
        SensorMonitoringSystemUnitTestProject.SensorMonitoringSystemServiceReference.SensorsDatas[] FindDatasBetweenDates(string sensorid, string startdate, string enddate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISensorMonitoringSystemService/FindDatasBetweenDates", ReplyAction="http://tempuri.org/ISensorMonitoringSystemService/FindDatasBetweenDatesResponse")]
        System.Threading.Tasks.Task<SensorMonitoringSystemUnitTestProject.SensorMonitoringSystemServiceReference.SensorsDatas[]> FindDatasBetweenDatesAsync(string sensorid, string startdate, string enddate);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ISensorMonitoringSystemServiceChannel : SensorMonitoringSystemUnitTestProject.SensorMonitoringSystemServiceReference.ISensorMonitoringSystemService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SensorMonitoringSystemServiceClient : System.ServiceModel.ClientBase<SensorMonitoringSystemUnitTestProject.SensorMonitoringSystemServiceReference.ISensorMonitoringSystemService>, SensorMonitoringSystemUnitTestProject.SensorMonitoringSystemServiceReference.ISensorMonitoringSystemService {
        
        public SensorMonitoringSystemServiceClient() {
        }
        
        public SensorMonitoringSystemServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public SensorMonitoringSystemServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SensorMonitoringSystemServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SensorMonitoringSystemServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public SensorMonitoringSystemUnitTestProject.SensorMonitoringSystemServiceReference.Companies[] FindAllCompanies() {
            return base.Channel.FindAllCompanies();
        }
        
        public System.Threading.Tasks.Task<SensorMonitoringSystemUnitTestProject.SensorMonitoringSystemServiceReference.Companies[]> FindAllCompaniesAsync() {
            return base.Channel.FindAllCompaniesAsync();
        }
        
        public bool UsernameControl(string username) {
            return base.Channel.UsernameControl(username);
        }
        
        public System.Threading.Tasks.Task<bool> UsernameControlAsync(string username) {
            return base.Channel.UsernameControlAsync(username);
        }
        
        public void RegisterUser(SensorMonitoringSystemUnitTestProject.SensorMonitoringSystemServiceReference.Users RegisteredUser) {
            base.Channel.RegisterUser(RegisteredUser);
        }
        
        public System.Threading.Tasks.Task RegisterUserAsync(SensorMonitoringSystemUnitTestProject.SensorMonitoringSystemServiceReference.Users RegisteredUser) {
            return base.Channel.RegisterUserAsync(RegisteredUser);
        }
        
        public SensorMonitoringSystemUnitTestProject.SensorMonitoringSystemServiceReference.Users FindUser(string username) {
            return base.Channel.FindUser(username);
        }
        
        public System.Threading.Tasks.Task<SensorMonitoringSystemUnitTestProject.SensorMonitoringSystemServiceReference.Users> FindUserAsync(string username) {
            return base.Channel.FindUserAsync(username);
        }
        
        public void RegisterUserDetail(SensorMonitoringSystemUnitTestProject.SensorMonitoringSystemServiceReference.UsersDetails RegisteredUserDetail) {
            base.Channel.RegisterUserDetail(RegisteredUserDetail);
        }
        
        public System.Threading.Tasks.Task RegisterUserDetailAsync(SensorMonitoringSystemUnitTestProject.SensorMonitoringSystemServiceReference.UsersDetails RegisteredUserDetail) {
            return base.Channel.RegisterUserDetailAsync(RegisteredUserDetail);
        }
        
        public bool UserDetailControl(string userid) {
            return base.Channel.UserDetailControl(userid);
        }
        
        public System.Threading.Tasks.Task<bool> UserDetailControlAsync(string userid) {
            return base.Channel.UserDetailControlAsync(userid);
        }
        
        public void SendInfoMail(SensorMonitoringSystemUnitTestProject.SensorMonitoringSystemServiceReference.UsersDetails RegisteredUserDetail) {
            base.Channel.SendInfoMail(RegisteredUserDetail);
        }
        
        public System.Threading.Tasks.Task SendInfoMailAsync(SensorMonitoringSystemUnitTestProject.SensorMonitoringSystemServiceReference.UsersDetails RegisteredUserDetail) {
            return base.Channel.SendInfoMailAsync(RegisteredUserDetail);
        }
        
        public void ChangePassword(SensorMonitoringSystemUnitTestProject.SensorMonitoringSystemServiceReference.Users ChangedPasswordUser) {
            base.Channel.ChangePassword(ChangedPasswordUser);
        }
        
        public System.Threading.Tasks.Task ChangePasswordAsync(SensorMonitoringSystemUnitTestProject.SensorMonitoringSystemServiceReference.Users ChangedPasswordUser) {
            return base.Channel.ChangePasswordAsync(ChangedPasswordUser);
        }
        
        public void Activation(SensorMonitoringSystemUnitTestProject.SensorMonitoringSystemServiceReference.Users ActivatedUser) {
            base.Channel.Activation(ActivatedUser);
        }
        
        public System.Threading.Tasks.Task ActivationAsync(SensorMonitoringSystemUnitTestProject.SensorMonitoringSystemServiceReference.Users ActivatedUser) {
            return base.Channel.ActivationAsync(ActivatedUser);
        }
        
        public SensorMonitoringSystemUnitTestProject.SensorMonitoringSystemServiceReference.UsersDetails FindUserDetail(string userid) {
            return base.Channel.FindUserDetail(userid);
        }
        
        public System.Threading.Tasks.Task<SensorMonitoringSystemUnitTestProject.SensorMonitoringSystemServiceReference.UsersDetails> FindUserDetailAsync(string userid) {
            return base.Channel.FindUserDetailAsync(userid);
        }
        
        public void ChangeCode(SensorMonitoringSystemUnitTestProject.SensorMonitoringSystemServiceReference.Users ChangedCodeUser) {
            base.Channel.ChangeCode(ChangedCodeUser);
        }
        
        public System.Threading.Tasks.Task ChangeCodeAsync(SensorMonitoringSystemUnitTestProject.SensorMonitoringSystemServiceReference.Users ChangedCodeUser) {
            return base.Channel.ChangeCodeAsync(ChangedCodeUser);
        }
        
        public SensorMonitoringSystemUnitTestProject.SensorMonitoringSystemServiceReference.Sensors[] FindCompaniesAllSensors(string companyid) {
            return base.Channel.FindCompaniesAllSensors(companyid);
        }
        
        public System.Threading.Tasks.Task<SensorMonitoringSystemUnitTestProject.SensorMonitoringSystemServiceReference.Sensors[]> FindCompaniesAllSensorsAsync(string companyid) {
            return base.Channel.FindCompaniesAllSensorsAsync(companyid);
        }
        
        public bool SensorDataControl(string sensorid) {
            return base.Channel.SensorDataControl(sensorid);
        }
        
        public System.Threading.Tasks.Task<bool> SensorDataControlAsync(string sensorid) {
            return base.Channel.SensorDataControlAsync(sensorid);
        }
        
        public SensorMonitoringSystemUnitTestProject.SensorMonitoringSystemServiceReference.Sensors FindSensor(string sensorid) {
            return base.Channel.FindSensor(sensorid);
        }
        
        public System.Threading.Tasks.Task<SensorMonitoringSystemUnitTestProject.SensorMonitoringSystemServiceReference.Sensors> FindSensorAsync(string sensorid) {
            return base.Channel.FindSensorAsync(sensorid);
        }
        
        public SensorMonitoringSystemUnitTestProject.SensorMonitoringSystemServiceReference.SensorsDatas[] FindAllSensorDatas(string sensorid) {
            return base.Channel.FindAllSensorDatas(sensorid);
        }
        
        public System.Threading.Tasks.Task<SensorMonitoringSystemUnitTestProject.SensorMonitoringSystemServiceReference.SensorsDatas[]> FindAllSensorDatasAsync(string sensorid) {
            return base.Channel.FindAllSensorDatasAsync(sensorid);
        }
        
        public SensorMonitoringSystemUnitTestProject.SensorMonitoringSystemServiceReference.SensorsDatas[] FindDatasBetweenDates(string sensorid, string startdate, string enddate) {
            return base.Channel.FindDatasBetweenDates(sensorid, startdate, enddate);
        }
        
        public System.Threading.Tasks.Task<SensorMonitoringSystemUnitTestProject.SensorMonitoringSystemServiceReference.SensorsDatas[]> FindDatasBetweenDatesAsync(string sensorid, string startdate, string enddate) {
            return base.Channel.FindDatasBetweenDatesAsync(sensorid, startdate, enddate);
        }
    }
}
